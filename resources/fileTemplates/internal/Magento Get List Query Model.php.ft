<?php
#parse("PHP File Header.php")

namespace ${NAMESPACE};

#set($uses = ${USES})
#foreach ($use in $uses.split(","))
use $use;
#end

/**
 * Get ${ENTITY_NAME} list by search criteria query.
 */
class ${CLASS_NAME}
{
    /**
     * @var ${COLLECTION_PROCESSOR_TYPE}
     */
    private ${COLLECTION_PROCESSOR_TYPE} $collectionProcessor;

    /**
     * @var ${ENTITY_COLLECTION_FACTORY_TYPE}
     */
    private ${ENTITY_COLLECTION_FACTORY_TYPE} $entityCollectionFactory;

    /**
     * @var ${ENTITY_DATA_MAPPER_TYPE}
     */
    private ${ENTITY_DATA_MAPPER_TYPE} $entityDataMapper;

    /**
     * @var ${SEARCH_CRITERIA_BUILDER_TYPE}
     */
    private ${SEARCH_CRITERIA_BUILDER_TYPE} $searchCriteriaBuilder;

    /**
     * @var ${SEARCH_RESULT_FACTORY_TYPE}
     */
    private ${SEARCH_RESULT_FACTORY_TYPE} $searchResultFactory;

    /**
     * @param ${COLLECTION_PROCESSOR_TYPE} $collectionProcessor
     * @param ${ENTITY_COLLECTION_FACTORY_TYPE} $entityCollectionFactory
     * @param ${ENTITY_DATA_MAPPER_TYPE} $entityDataMapper
     * @param ${SEARCH_CRITERIA_BUILDER_TYPE} $searchCriteriaBuilder
     * @param ${SEARCH_RESULT_FACTORY_TYPE} $searchResultFactory
     */
    public function __construct(
        ${COLLECTION_PROCESSOR_TYPE} $collectionProcessor,
        ${ENTITY_COLLECTION_FACTORY_TYPE} $entityCollectionFactory,
        ${ENTITY_DATA_MAPPER_TYPE} $entityDataMapper,
        ${SEARCH_CRITERIA_BUILDER_TYPE} $searchCriteriaBuilder,
        ${SEARCH_RESULT_FACTORY_TYPE} $searchResultFactory
    ) {
        $this->collectionProcessor = $collectionProcessor;
        $this->entityCollectionFactory = $entityCollectionFactory;
        $this->entityDataMapper = $entityDataMapper;
        $this->searchCriteriaBuilder = $searchCriteriaBuilder;
        $this->searchResultFactory = $searchResultFactory;
    }

    /**
     * Get ${ENTITY_NAME} list by search criteria.
     *
     * @param ${SEARCH_CRITERIA_TYPE}|null $searchCriteria
     *
     * @return ${SEARCH_RESULT_TYPE}
     */
    public function execute(?${SEARCH_CRITERIA_TYPE} $searchCriteria = null): ${SEARCH_RESULT_TYPE}
    {
        /** @var ${ENTITY_COLLECTION_TYPE} $collection */
        $collection = $this->entityCollectionFactory->create();

        if ($searchCriteria === null) {
            $searchCriteria = $this->searchCriteriaBuilder->create();
        } else {
            $this->collectionProcessor->process($searchCriteria, $collection);
        }

        $entityDataObjects = $this->entityDataMapper->map($collection);

        /** @var ${SEARCH_RESULT_TYPE} $searchResult */
        $searchResult = $this->searchResultFactory->create();
        $searchResult->setItems($entityDataObjects);
        $searchResult->setTotalCount($collection->getSize());
        $searchResult->setSearchCriteria($searchCriteria);

        return $searchResult;
    }
}
