<?php
#parse("PHP File Header.php")

namespace ${NAMESPACE};

#set($uses = ${USES})
#foreach ($use in $uses.split(","))
use $use;
#end

/**
 * Save ${ENTITY_NAME} Command.
 */
class ${CLASS_NAME}
{
    /**
     * @var ${LOGGER}
     */
    private ${LOGGER} $logger;

    /**
     * @var ${MODEL_FACTORY}
     */
    private ${MODEL_FACTORY} $modelFactory;

    /**
     * @var ${RESOURCE}
     */
    private ${RESOURCE} $resource;

    /**
     * @param ${LOGGER} $logger
     * @param ${MODEL_FACTORY} $modelFactory
     * @param ${RESOURCE} $resource
     */
    public function __construct(
        ${LOGGER} $logger,
        ${MODEL_FACTORY} $modelFactory,
        ${RESOURCE} $resource
    ) {
        $this->logger = $logger;
        $this->modelFactory = $modelFactory;
        $this->resource = $resource;
    }

    /**
     * Save ${ENTITY_NAME}.
     *
     * @param ${DTO} $${DTO_PROPERTY}
     *
     * @return int
     * @throws ${COULD_NOT_SAVE}
     */
    public function execute(${DTO} $${DTO_PROPERTY}): int
    {
        try {
            /** @var ${MODEL} $model */
            $model = $this->modelFactory->create();
            $model->addData($${DTO_PROPERTY}->getData());
            $model->setHasDataChanges(true);

            if (!$model->getData(${ENTITY_ID_CONST})) {
                $model->isObjectNew(true);
            }
            $this->resource->save($model);
        } catch (${EXCEPTION} $exception) {
            $this->logger->error(
                __('Could not save ${ENTITY_NAME}. Original message: {message}'),
                [
                    'message' => $exception->getMessage(),
                    'exception' => $exception
                ]
            );
            throw new ${COULD_NOT_SAVE}(__('Could not save ${ENTITY_NAME}.'));
        }

        return (int) $model->getData(${ENTITY_ID_CONST});
    }
}
