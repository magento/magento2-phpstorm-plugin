<?php
#parse("PHP File Header.php")

namespace ${NAMESPACE};

#set($uses = ${USES})
#foreach ($use in $uses.split(","))
use $use;
#end

/**
 * Save ${ENTITY_NAME} controller action.
 */
class ${CLASS_NAME} extends ${EXTENDS} implements ${IMPLEMENTS}
{
     /**
     * Authorization level of a basic admin session
     *
     * @see _isAllowed()
     */
    public const ADMIN_RESOURCE = '${ADMIN_RESOURCE}';

     /**
     * @var ${DATA_PERSISTOR}
     */
    private ${DATA_PERSISTOR} $dataPersistor;

    /**
     * @var ${SAVE_COMMAND}
     */
    private ${SAVE_COMMAND} $saveCommand;

    /**
     * @var ${ENTITY_DTO_FACTORY}
     */
    private ${ENTITY_DTO_FACTORY} $entityDataFactory;

    /**
     * @param Context $context
     * @param ${DATA_PERSISTOR} $dataPersistor
     * @param ${SAVE_COMMAND} $saveCommand
     * @param ${ENTITY_DTO_FACTORY} $entityDataFactory
     */
    public function __construct(
        Context $context,
        ${DATA_PERSISTOR} $dataPersistor,
        ${SAVE_COMMAND} $saveCommand,
        ${ENTITY_DTO_FACTORY} $entityDataFactory
    ) {
        parent::__construct($context);
        $this->dataPersistor = $dataPersistor;
        $this->saveCommand = $saveCommand;
        $this->entityDataFactory = $entityDataFactory;
    }

    /**
     * Save ${ENTITY_NAME} Action.
     *
     * @return ResponseInterface|ResultInterface
     */
    public function execute()
    {
        $resultRedirect = $this->resultRedirectFactory->create();
        $params = $this->getRequest()->getParams();

        try {
                /** @var ${ENTITY_DTO}|${DATA_OBJECT} $entityModel */
                $entityModel = $this->entityDataFactory->create();
                $entityModel->addData($params['general']);
                $this->saveCommand->execute($entityModel);
                $this->messageManager->addSuccessMessage(
                __('The ${ENTITY_NAME} data was saved successfully')
                );
                $this->dataPersistor->clear('entity');
        } catch (${COULD_NOT_SAVE} $exception) {
                $this->messageManager->addErrorMessage($exception->getMessage());
                $this->dataPersistor->set('entity', $params);

                return $resultRedirect->setPath('*/*/edit', [
                ${ENTITY_ID_REFERENCE} => $this->getRequest()->getParam(${ENTITY_ID_REFERENCE})
                ]);
        }

        return $resultRedirect->setPath('*/*/');
    }
}
