<?php
#parse("PHP File Header.php")

namespace ${NAMESPACE};

#set($uses = ${USES})
#foreach ($use in $uses.split(","))
use $use;
#end

/**
 * Class to build edit and delete link for each item.
 */
class ${CLASS_NAME} extends ${PARENT_CLASS}
{
    /**
     * Entity name.
     */
    private const ENTITY_NAME = '${ENTITY_NAME}';

    /**
     * Url paths.
     */
    private const EDIT_URL_PATH = '${EDIT_URL_PATH}';
    private const DELETE_URL_PATH = '${DELETE_URL_PATH}';

    /**
     * @var ${URL}
     */
    private ${URL} $urlBuilder;

    /**
     * @param ${CONTEXT} $context
     * @param ${UI_COMPONENT_FACTORY} $uiComponentFactory
     * @param ${URL} $urlBuilder
     * @param array $components
     * @param array $data
     */
    public function __construct(
        ${CONTEXT} $context,
        ${UI_COMPONENT_FACTORY} $uiComponentFactory,
        ${URL} $urlBuilder,
        array $components = [],
        array $data = []
    ) {
        parent::__construct(
            $context,
            $uiComponentFactory,
            $components,
            $data
        );
        $this->urlBuilder = $urlBuilder;
    }

    /**
     * Prepare data source.
     *
     * @param array $dataSource
     *
     * @return array
     */
    public function prepareDataSource(array $dataSource): array
    {
    #set($entityIdAccessor = "[" + ${ENTITY_ID_REFERENCE} + "]")
        if (isset($dataSource['data']['items'])) {
            foreach ($dataSource['data']['items'] as &$item) {
                if (isset($item$entityIdAccessor)) {
                    $entityName = static::ENTITY_NAME;
                    $urlData = [${ENTITY_ID_REFERENCE} => $item$entityIdAccessor];

                    $editUrl = $this->urlBuilder->getUrl(static::EDIT_URL_PATH, $urlData);
                    $deleteUrl = $this->urlBuilder->getUrl(static::DELETE_URL_PATH, $urlData);

                    #set($columnNameAccessor = "[$this->getData('name')]")
                    $item$columnNameAccessor = [
                        'edit' => $this->getActionData($editUrl, (string) __('Edit')),
                        'delete' => $this->getActionData(
                            $deleteUrl,
                            (string) __('Delete'),
                            (string) __('Delete %1', $entityName),
                            (string) __('Are you sure you want to delete a %1 record?', $entityName)
                        )
                    ];
                }
            }
        }

        return $dataSource;
    }

     /**
     * Get action link data array.
     *
     * @param string $url
     * @param string $label
     * @param string|null $dialogTitle
     * @param string|null $dialogMessage
     *
     * @return array
     */
    private function getActionData(
        string $url,
        string $label,
        ?string $dialogTitle = null,
        ?string $dialogMessage = null
    ): array {
        $data = [
            'href' => $url,
            'label' => $label,
            'post' => true,
            '__disableTmpl' => true
        ];

        #set($confirmKeyAccessor = "['confirm']")
        if ($dialogTitle && $dialogMessage) {
            $data$confirmKeyAccessor = [
                'title' => $dialogTitle,
                'message' => $dialogMessage
            ];
        }

        return $data;
    }
}
